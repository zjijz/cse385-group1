/** DB setup **/
.mode column
.headers ON
PRAGMA foreign_keys = ON;

/** Tables **/
CREATE TABLE IF NOT EXISTS Book (
	BookId INT NOT NULL,
	ISBN VARCHAR(10) NOT NULL,
	Title VARCHAR(30) NOT NULL,
	Edition VARCHAR(10),
	Publisher VARCHAR(25),
	PubDate DATE,
	Summary VARCHAR(250) NOT NULL,
	File VARCHAR(100) NOT NULL,
  NumCopies INT NOT NULL,
	PRIMARY KEY (BookID)
);

CREATE TABLE IF NOT EXISTS Author (
 	BookId INT NOT NULL,
  Fname VARCHAR(30) NOT NULL,
  Lname VARCHAR(30) NOT NULL,
  PRIMARY KEY (BookId, Fname, Lname),
  FOREIGN KEY (BookId) REFERENCES Book(BookId)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Genre (
  GenreId INT NOT NULL,
  GenreName VARCHAR(20) NOT NULL,
 	PRIMARY KEY (GenreId)
);

CREATE TABLE IF NOT EXISTS BookGenre (
  BookId INT NOT NULL,
  GenreId INT NOT NULL,
  PRIMARY KEY (BookId, GenreId),
  FOREIGN KEY (BookId) REFERENCES Book(BookId)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
  FOREIGN KEY (GenreId) REFERENCES Genre(GenreId)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Hold (
 	BookId INT NOT NULL,
 	Email VARCHAR(50) NOT NULL,
  StartDate DATE NOT NULL,
 	EndDate DATE NOT NULL,
 	PRIMARY KEY (BookId, Email),
  FOREIGN KEY (BookId) REFERENCES Book(BookId)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
  FOREIGN KEY (Email) REFERENCES User(Email)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Loan (
 	BookId INT NOT NULL,
  Email VARCHAR(50) NOT NULL,
 	StartDate DATE NOT NULL,
 	EndDate DATE NOT NULL,
 	PRIMARY KEY (BookId, Email),
  FOREIGN KEY (BookId) REFERENCES Book(BookId)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
  FOREIGN KEY (Email) REFERENCES User(Email)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Review (
  BookId INT NOT NULL,
  Email VARCHAR(50) NOT NULL,
  Rating INT NOT NULL,
  Words VARCHAR(140) NOT NULL,
  PRIMARY KEY (BookId, Email),
  FOREIGN KEY (BookId) REFERENCES Book(BookId)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
  FOREIGN KEY (Email) REFERENCES User(Email)
	ON DELETE CASCADE
	ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Privilege (
  PrivId INT NOT NULL,
  PrivName INT NOT NULL,
  PRIMARY KEY (PrivId)
);

CREATE TABLE IF NOT EXISTS User (
	Email VARCHAR(50) NOT NULL,
	Password VARCHAR(25) NOT NULL,
	PrivId NOT NULL,
	Picture VARCHAR(100),
	Fname VARCHAR(25),
	Lname VARCHAR(25),
	PRIMARY KEY(Email),
  FOREIGN KEY (PrivId) REFERENCES Privilege(PrivId)
  ON DELETE CASCADE
  ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS Friend (
	EmailFirst VARCHAR(50) NOT NULL,
	EmailSecond VARCHAR(50) NOT NULL,
  PRIMARY KEY (EmailFirst, EmailSecond),
  FOREIGN KEY (EmailFirst) REFERENCES User(Email)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
  FOREIGN KEY (EmailSecond) REFERENCES User(Email)
  ON DELETE CASCADE
	ON UPDATE CASCADE
);

/** Views **/
CREATE VIEW IF NOT EXISTS BookView AS
  SELECT *, NumCopies AS NumAvailable
  FROM Book
  WHERE BookId NOT IN
    (SELECT BookId
    FROM Book NATURAL JOIN Loan
    WHERE EndDate > DATE('now'))
  UNION
  SELECT Book.*, (NumCopies-COUNT(*)) as NumAvailable
  FROM Book NATURAL JOIN Loan
  WHERE EndDate > DATE('now')
  GROUP BY Book.BookId;

/** Triggers **/
  /* We need a trigger that checks daily for when loan are up */
  /* Same trigger needs to then check if someone else is in queue for book (has hold) and grant earliest hold the right */
  /* Triggers to block hold creations if book is already on hold to user */

/** Insert test data **/

/* Genre Enum */
INSERT INTO Genre VALUES (0, "Fiction");
INSERT INTO Genre Values (1, "Non-fiction");
INSERT INTO Genre VALUES (2, "Drama");
INSERT INTO Genre VALUES (3, "Adventure");
INSERT INTO Genre VALUES (4, "Romance");
INSERT INTO Genre VALUES (5, "Mystery");
INSERT INTO Genre VALUES (6, "Horror");
INSERT INTO Genre VALUES (7, "Fantasy");
INSERT INTO Genre VALUES (8, "Religion");
INSERT INTO Genre VALUES (9, "Science Fiction");
INSERT INTO Genre VALUES (10, "Self Help");
INSERT INTO Genre VALUES (11, "Reference");

/* Privilege Enum */
INSERT INTO Privilege VALUES (0, "User");
INSERT INTO Privilege VALUES (1, "Administrator")

/* 10 Books and related authors, genres */

INSERT INTO Book VALUES(0, "B00139V8LC", "Bones", NULL, NULL, '1915-01-01', "It is a time when the major world powers are vying for colonial honors, a time of ju-ju, witch doctors, and an uneasy peace with Bosambo, impressive chief of the Ochori. ", 
"/Users/emmabelanger/Desktop/Books/bones.txt", 5);
INSERT INTO Book VALUES(1, "B0087MI2CQ", "Only a Girl's Love", NULL, "Queensway Library", NULL, "Charles Garvice was a prolific British writer of over 150 romance novels, who also used the female pseudonym Caroline Hart", 
"/Users/emmabelanger/Desktop/Books/OnlyAGirlsLove.txt", 2);
INSERT INTO Book VALUES(2, "1606644734", "Hall of Mirrors", NULL, "Aegypan", '2011-05-01', "For an instant you think it is temporary blindness, this sudden dark that comes in the middle of a bright afternoon. It must be blindness, you think; could the sun that was tanning you have gone out instantaneously, leaving you in utter blackness? ", 
"/Users/emmabelanger/Desktop/Books/HallOfMirrors.txt", 4);
INSERT INTO Book VALUES(3, "0486454010", "Dracula", "1 edition", "Dover Publications", '2000-04-18', "During a business visit to Count Dracula's castle in Transylvania, a young English solicitor finds himself at the center of a series of horrifying incidents.", 
"/Users/emmabelanger/Desktop/Books/dracula.txt", 1);
INSERT INTO Book VALUES(4, "1853260444", "The Moonstone", "Reprint Edition", "Wordsworth Editions Ltd", '1997-08-05', "A priceless Indian diamond which had been brought to England as spoils of war, is given to Rachel Verrinder on her eighteenth birthday.", 
"/Users/emmabelanger/Desktop/Books/moonstone.txt", 1);
INSERT INTO Book VALUES(5, "1466322748", "The Trial", "Tra Edition", "CreateSpace Independent", '2011-07-12', "Kafka's masterpiece and best-known work, The Trial tells the story of a man arrested and prosecuted by a remote, inaccessible authority, with the nature of his crime not revealed to him or to the reader.", 
"/Users/emmabelanger/Desktop/Books/trial.txt", 6);
INSERT INTO Book VALUES(6, "0553213113", "Moby Dick", "59642nd edition", "Bantam Classics", '1981-03-01', "Mad Captain Ahab's quest for the White Whale is a timeless epic--a stirring tragedy of vengeance and obsession, a searing parable about humanity lost in a universe of moral ambiguity.", 
"/Users/emmabelanger/Desktop/Books/moby.txt", 2);
INSERT INTO Book VALUES(7, "1110489943", "Kepler", NULL, "BiblioLife", '2009-05-20', "This is a pre-1923 historical reproduction that was curated for quality. ", 
"/Users/emmabelanger/Desktop/Books/kepler.txt", 1);
INSERT INTO Book VALUES(8, "1406845892", "Bacon", NULL, "Echo Library", '2007-08-28', "This work has been selected by scholars as being culturally important, and is part of the knowledge base of civilization as we know it. ", 
"/Users/emmabelanger/Desktop/Books/bacon.txt", 3);
INSERT INTO Book VALUES(9, "0486264726", "The Call of the Wild", "1 Edition", "Dover Publications", '1990-07-01', "Jack London's novels and ruggedly individual life seemed to embody American hopes, frustrations, and romantic longings in the turbulent first years of the twentieth century.", 
"/Users/emmabelanger/Desktop/Books/callOfWild.txt", 8);



INSERT INTO Author VALUES(0, "Edgar", "Wallace");
INSERT INTO Author VALUES(1, "Charles", "Garvice");
INSERT INTO Author VALUES(2, "Fredric", "Brown");
INSERT INTO Author VALUES(3, "Bram", "Stoker");
INSERT INTO Author VALUES(4, "Wilkie", "Collins");
INSERT INTO Author VALUES(5, "Franz", "Kafka");
INSERT INTO Author VALUES(6, "Herman", "Melville");
INSERT INTO Author VALUES(7, "Walter", "Bryant");
INSERT INTO Author VALUES(8, "Richard", "Church");
INSERT INTO Author VALUES(9, "Jack", "London");


INSERT INTO BookGenre VALUES(0, 3);
INSERT INTO BookGenre VALUES(0, 0);

INSERT INTO BookGenre VALUES(1, 0);
INSERT INTO BookGenre VALUES(1, 4);

INSERT INTO BookGenre VALUES(2, 0);
INSERT INTO BookGenre VALUES(2, 9);

INSERT INTO BookGenre VALUES(3, 0);
INSERT INTO BookGenre VALUES(3, 5);

INSERT INTO BookGenre VALUES(4, 0);
INSERT INTO BookGenre VALUES(4, 4);
INSERT INTO BookGenre VALUES(4, 5);

INSERT INTO BookGenre VALUES(5, 0);
INSERT INTO BookGenre VALUES(5, 6);

INSERT INTO BookGenre VALUES(6, 0);
INSERT INTO BookGenre VALUES(6, 3);

INSERT INTO BookGenre VALUES(7, 1);

INSERT INTO BookGenre VALUES(8, 1);

INSERT INTO BookGenre VALUES(9, 0);
INSERT INTO BookGenre VALUES(9, 3);


/* Accounts */
  /* 4 user accounts (3 students, 1 admin) */
	
INSERT INTO User VALUES("meredithgrey@seattlegrace.com", "password1", 0, "Picture", "Meredith", "Grey");
INSERT INTO User VALUES("derekshepherd@seattlegrace.com", "password2", 0, "Picture", "Derek", "Shepherd");
INSERT INTO User VALUES("janedoe@email.com", "password3", 1, "Picture", "Jane", "Doe");
INSERT INTO User VALUES("johndoe@email.com", "password4", 0, "Picture", "John", "Doe");


/* Friendships */
  /* Create one friendship between 2 students */

INSERT INTO Friend VALUES("meredithgrey@seattlegrace.com", "derekshepherd@seattlegrace.com");
INSERT INTO Friend VALUES("meredithgrey@seattlegrace.com", "janedoe@email.com");

/* Reviews */
  /* Add reviews for 3 books for each user (different books preferably) */
  
INSERT INTO Review VALUES(9, "johndoe@email.com", 8, "Great book! Even better than the movie.");
INSERT INTO Review VALUES(6, "johndoe@email.com", 2, "It's okay.");
INSERT INTO Review VALUES(1, "johndoe@email.com", 10, "My absolute favorite!");


INSERT INTO Review VALUES(3, "meredithgrey@seattlegrace.com", 5, "It's a classic.");
INSERT INTO Review VALUES(2, "meredithgrey@seattlegrace.com", 5, "Good read.");
INSERT INTO Review VALUES(5, "meredithgrey@seattlegrace.com", 2, "It's too scary. Not a fan.");


INSERT INTO Review VALUES(0, "derekshepherd@seattlegrace.com", 5, "Not the best book I've read this week.");
INSERT INTO Review VALUES(6, "derekshepherd@seattlegrace.com", 4, "Not my favorite");
INSERT INTO Review VALUES(7, "derekshepherd@seattlegrace.com", 7, "One of my favorite biographies.");
  

/* Holds / Loans */
  /* Add two expired loans for each user for two of the books reviewed (2 week duration) */
  
INSERT INTO Loan VALUES(9, "johndoe@email.com", '2016-09-01', '2016-09-14');
INSERT INTO Loan VALUES(1, "johndoe@email.com", '2016-09-25', '2016-10-9');

INSERT INTO Loan VALUES(2, "meredithgrey@seattlegrace.com", '2016-08-01', '2016-09-14');
INSERT INTO Loan VALUES(5, "meredithgrey@seattlegrace.com", '2016-08-18', '2016-09-01');

INSERT INTO Loan VALUES(0, "derekshepherd@seattlegrace.com", '2016-10-01', '2016-11-15');
INSERT INTO Loan VALUES(6, "derekshepherd@seattlegrace.com", '2016-09-22', '2016-10-06');

  
  /* Add expired holds for each user for two of the books reviewed (expire when loan started) */
  
INSERT INTO Hold VALUES(9, "johndoe@email.com", '2016-08-25', '2016-09-01');
INSERT INTO Hold VALUES(1, "johndoe@email.com", '2016-09-12', '2016-09-25');

INSERT INTO Hold VALUES(2, "meredithgrey@seattlegrace.com", '2016-07-19', '2016-08-01');
INSERT INTO Hold VALUES(5, "meredithgrey@seattlegrace.com", '2016-08-04', '2016-08-18');

INSERT INTO Hold VALUES(0, "derekshepherd@seattlegrace.com", '2016-09-24', '2016-10-01');
INSERT INTO Hold VALUES(6, "derekshepherd@seattlegrace.com", '2016-09-18', '2016-09-22');
  
  /* Add holds for each user that has reviews for the book the other one has on loan
    (with start date sometime after they receive lock)(also ensure these books only have one copy available
    each) */
    
/* Not sure what you're trying to do?? */
    
  /* Add loans for the last book each user reviewed to expire when classes end this term (with start date 2 weeks before) */

INSERT INTO Loan VALUES(5, "johndoe@email.com", '2016-12-02', '2016-012-16');
INSERT INTO Loan VALUES(2, "meredithgrey@seattlegrace.com", '2016-11-28', '2016-12-12');
INSERT INTO Loan VALUES(8, "derekshepherd@seattlegrace.com", '2016-11-16', '2016-11-30');

